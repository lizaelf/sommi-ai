
    // Listen for bottom sheet close events
    window.addEventListener('abortConversation', abortConversation);
    
    return () => {
      window.removeEventListener('abortConversation', abortConversation);
      abortConversation(); // Clean up on unmount
    };
  }, [currentEventSource]);

  // Display loading state if no currentConversationId
  if (!currentConversationId) {
    return (
      <div className="flex items-center justify-center h-[calc(100vh-100px)]">
        <div className="text-center">
          <div className="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
          </div>
          <p className="mt-4 text-gray-600">Loading conversation...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-[100dvh] max-h-[100dvh] mx-auto" style={{ maxWidth: "1200px" }}>
      {/* Main Content Area */}
      <div className="flex flex-1 overflow-hidden">
        {/* Chat Area */}
        <main className="flex-1 flex flex-col bg-background overflow-hidden" style={{
          backgroundColor: "#0A0A0A !important",
          backgroundImage: "none !important"
        }}>
          {/* Scrollable container */}
          <div
            ref={chatContainerRef}
            className="flex-1 overflow-y-auto scrollbar-hide"
          >
            {/* Wine bottle image with fixed size and glow effect - fullscreen height from top */}
            <div
              className="w-full flex flex-col items-center justify-center py-8 relative"
              style={{
                backgroundColor: "#0A0A0A",
                paddingTop: "75px", // Match the header height exactly
                minHeight: "100vh", // Make the div full screen height
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
              }}
            >
              {/* Wine bottle image */}
              <WineBottleImage 
                image={selectedWine?.image || currentWine?.image} 
                wineName={selectedWine?.name || currentWine?.name} 
              />

              {/* Wine name with typography styling */}
              <div
                style={{
                  width: "100%",
                  textAlign: "center",
                  justifyContent: "center",
                  display: "flex",
                  flexDirection: "column",
                  color: "white",
                  wordWrap: "break-word",
                  position: "relative",
                  zIndex: 2,
                  padding: "0 20px",
                  marginBottom: "0",
                  ...typography.h1,
                }}
              >
                {selectedWine ? `2021 ${selectedWine.name}` : currentWine ? `${currentWine.year} ${currentWine.name}` : `${getWineVintage()} ${getWineDisplayName()}`}
              </div>

              {/* Wine region with typography styling and flag */}
              <div
                style={{
                  textAlign: "center",
                  justifyContent: "center",
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center",
                  color: "rgba(255, 255, 255, 0.60)",
                  wordWrap: "break-word",
                  position: "relative",
                  zIndex: 2,
                  padding: "20px 20px",
                  gap: "6px",
                  marginBottom: "0",
                  ...typography.body1R,
                }}
              >
                <USFlagImage />
                <span>{selectedWine ? "Santa Cruz Mountains | California | United States" : getWineRegion()}</span>
              </div>

              {/* Wine ratings section */}
              <div
                style={{
                  width: "100%",
                  justifyContent: "center",
                  alignItems: "center",
                  gap: "20px",
                  display: "flex",
                  flexWrap: "wrap",
                  position: "relative",
                  zIndex: 2,
                  padding: "0 20px",
                  marginBottom: "0",
                }}
              >
                <span
                  style={{
                    color: "white",
                    display: "flex",
                    alignItems: "center",
                    gap: "4px",
                  }}
                >
                  <span style={{ ...typography.num, color: "white" }}>
                    {currentWine ? currentWine.ratings.vn : 95}
                  </span>
                  <span style={{ ...typography.body1R, color: "#999999" }}>
                    VN
                  </span>
                </span>
                <span
                  style={{
                    color: "white",
                    display: "flex",
                    alignItems: "center",
                    gap: "4px",
                  }}
                >
                  <span style={{ ...typography.num, color: "white" }}>
                    {currentWine ? currentWine.ratings.jd : 93}
                  </span>
                  <span style={{ ...typography.body1R, color: "#999999" }}>
                    JD
                  </span>
                </span>
                <span
                  style={{
                    color: "white",
                    display: "flex",
                    alignItems: "center",
                    gap: "4px",
                  }}
                >
                  <span style={{ ...typography.num, color: "white" }}>
                    {currentWine ? currentWine.ratings.ws : 93}
                  </span>
                  <span style={{ ...typography.body1R, color: "#999999" }}>
                    WS
                  </span>
                </span>
                <span
                  style={{
                    color: "white",
                    display: "flex",
                    alignItems: "center",
                    gap: "4px",
                  }}
                >
                  <span style={{ ...typography.num, color: "white" }}>
                    {currentWine ? `${currentWine.ratings.abv}%` : '14.3%'}
                  </span>
                  <span style={{ ...typography.body1R, color: "#999999" }}>
                    ABV
                  </span>
                </span>
              </div>

              {/* Historic Heritage Section */}
              <div
                style={{
                  width: "100%",
                  padding: "0 20px",
                  marginTop: "48px",
                  marginBottom: "20px",
                }}
              >
                <p
                  style={{
                    color: "white",
                    marginBottom: "16px",
                    ...typography.body,
                  }}
                >
                  {getWineHistory()}
                </p>
              </div>

              {/* Food Pairing Section */}
              <div
                style={{
                  width: "100%",
                  padding: "0 20px",
                  marginBottom: "20px",
                }}
              >
                <h1
                  style={{
                    ...typography.h1,
                    color: "white",
                    marginBottom: "24px",
                    textAlign: "left",
                  }}
                >
                  Food pairing
                </h1>

                {/* Red Meat Pairing - Expandable */}
                <div
                  onClick={() => {
                    // Toggle expanded state for this item
                    setExpandedItem(
                      expandedItem === "redMeat" ? null : "redMeat",
                    );
                  }}
                  style={{
                    backgroundColor: "#191919",
                    borderRadius: "16px",
                    padding: "0 20px",
                    minHeight: "64px", // Use minHeight instead of fixed height to allow expansion
                    marginBottom: "8px",
                    display: "flex",
                    flexDirection: "column", // Change to column for expanded view
                    gap: "10px",
                    alignSelf: "stretch",
                    cursor: "pointer", // Show pointer cursor to indicate clickable
                    transition: "all 0.3s ease", // Smooth transition for expanding
                  }}
                >
                  {/* Header row - always visible */}
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      minHeight: "64px",
                      width: "100%",
                    }}
                  >
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "12px",
                      }}
                    >
                      <span style={{ fontSize: "24px" }}>🥩</span>
                      <span
                        style={{
                          color: "white",
                          ...typography.body,
                        }}
                      >
                        Red Meat
                      </span>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "8px",
                      }}
                    >
                      <span
                        style={{
                          color: "black",
                          backgroundColor: "#e0e0e0",
                          padding: "6px 14px",
                          borderRadius: "999px",
                          ...typography.buttonPlus1,
                        }}
                      >
                        Perfect match
                      </span>
                      {/* Rotating chevron icon for expanded state */}
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        style={{
                          transform:
                            expandedItem === "redMeat"
                              ? "rotate(180deg)"
                              : "rotate(0deg)",
                          transition: "transform 0.3s ease",
                        }}
                      >
                        <path
                          d="M4.22 8.47a.75.75 0 0 1 1.06 0L12 15.19l6.72-6.72a.75.75 0 1 1 1.06 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L4.22 9.53a.75.75 0 0 1 0-1.06"
                          fill="white"
                        />
                      </svg>
                    </div>
                  </div>

                  {/* Expanded content - only visible when expanded */}
                  {expandedItem === "redMeat" && (
                    <div
                      style={{
                        padding: "0 0 20px 0", // Remove left padding
                        color: "white",
                        ...typography.body, // Using Body text style as requested
                      }}
                      className="pl-[0px] pr-[0px]"
                    >
                      <div style={{ paddingLeft: "20px", margin: "10px 0" }}>
                        {getFoodPairingContent().dishes.map((dish: string, index: number) => (
                          <div key={index} style={{ display: "flex", alignItems: "center", gap: "8px", marginBottom: "8px" }}>
                            <span style={{ fontSize: "16px" }}>🥩</span>
                            <span>{dish}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Cheese Pairings - Expandable */}
                <div
                  onClick={() => {
                    // Toggle expanded state for this item
                    setExpandedItem(
                      expandedItem === "cheese" ? null : "cheese",
                    );
                  }}
                  style={{
                    backgroundColor: "#191919",
                    borderRadius: "16px",
                    padding: "0 20px",
                    minHeight: "64px",
                    marginBottom: "8px",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    alignSelf: "stretch",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                  }}
                >
                  {/* Header row - always visible */}
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      minHeight: "64px",
                      width: "100%",
                    }}
                  >
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "12px",
                      }}
                    >
                      <span style={{ fontSize: "24px" }}>🧀</span>
                      <span style={{ color: "white", ...typography.body }}>
                        Cheese Pairings
                      </span>
                    </div>
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                      style={{
                        transform:
                          expandedItem === "cheese"
                            ? "rotate(180deg)"
                            : "rotate(0deg)",
                        transition: "transform 0.3s ease",
                      }}
                    >
                      <path
                        d="M4.22 8.47a.75.75 0 0 1 1.06 0L12 15.19l6.72-6.72a.75.75 0 1 1 1.06 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L4.22 9.53a.75.75 0 0 1 0-1.06"
                        fill="white"
                      />
                    </svg>
                  </div>

                  {/* Expanded content - only visible when expanded */}
                  {expandedItem === "cheese" && (
                    <div
                      style={{
                        padding: "0 0 20px 0",
                        color: "white",
                        ...typography.body,
                      }}
                    >
                      <div style={{ paddingLeft: "20px", margin: "10px 0" }}>
                        {getCheesePairingContent().cheeses.map((cheese: string, index: number) => (
                          <div key={index} style={{ display: "flex", alignItems: "center", gap: "8px", marginBottom: "8px" }}>
                            <span style={{ fontSize: "16px" }}>🧀</span>
                            <span>{cheese}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Vegetarian Options - Expandable */}
                <div
                  onClick={() => {
                    // Toggle expanded state for this item
                    setExpandedItem(
                      expandedItem === "vegetarian" ? null : "vegetarian",
                    );
                  }}
                  style={{
                    backgroundColor: "#191919",
                    borderRadius: "16px",
                    padding: "0 20px",
                    minHeight: "64px",
                    marginBottom: "8px",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    alignSelf: "stretch",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                  }}
                >
                  {/* Header row - always visible */}
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      minHeight: "64px",
                      width: "100%",
                    }}
                  >
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "12px",
                      }}
                    >
                      <span style={{ fontSize: "24px" }}>🥗</span>
                      <span style={{ color: "white", ...typography.body }}>
                        Vegetarian Options
                      </span>
                    </div>
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                      style={{
                        transform:
                          expandedItem === "vegetarian"
                            ? "rotate(180deg)"
                            : "rotate(0deg)",
                        transition: "transform 0.3s ease",
                      }}
                    >
                      <path
                        d="M4.22 8.47a.75.75 0 0 1 1.06 0L12 15.19l6.72-6.72a.75.75 0 1 1 1.06 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L4.22 9.53a.75.75 0 0 1 0-1.06"
                        fill="white"
                      />
                    </svg>
                  </div>

                  {/* Expanded content - only visible when expanded */}
                  {expandedItem === "vegetarian" && (
                    <div
                      style={{
                        padding: "0 0 20px 0",
                        color: "white",
                        ...typography.body,
                      }}
                    >
                      <div style={{ paddingLeft: "20px", margin: "10px 0" }}>
                        {getVegetarianPairingContent().dishes.map((dish: string, index: number) => (
                          <div key={index} style={{ display: "flex", alignItems: "center", gap: "8px", marginBottom: "8px" }}>
                            <span style={{ fontSize: "16px" }}>🥗</span>
                            <span>{dish}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Avoid pairing with - Expandable */}
                <div
                  onClick={() => {
                    // Toggle expanded state for this item
                    setExpandedItem(expandedItem === "avoid" ? null : "avoid");
                  }}
                  style={{
                    backgroundColor: "#191919",
                    borderRadius: "16px",
                    padding: "0 20px",
                    minHeight: "64px",
                    marginBottom: "8px",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    alignSelf: "stretch",
                    cursor: "pointer",
                    transition: "all 0.3s ease",
                  }}
                >
                  {/* Header row - always visible */}
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      minHeight: "64px",
                      width: "100%",
                    }}
                  >
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "12px",
                      }}
                    >
                      <span style={{ fontSize: "24px", color: "red" }}>❌</span>
                      <span style={{ color: "white", ...typography.body }}>
                        Avoid pairing with
                      </span>
                    </div>
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                      style={{
                        transform:
                          expandedItem === "avoid"
                            ? "rotate(180deg)"
                            : "rotate(0deg)",
                        transition: "transform 0.3s ease",
                      }}
                    >
                      <path
                        d="M4.22 8.47a.75.75 0 0 1 1.06 0L12 15.19l6.72-6.72a.75.75 0 1 1 1.06 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L4.22 9.53a.75.75 0 0 1 0-1.06"
                        fill="white"
                      />
                    </svg>
                  </div>

                  {/* Expanded content - only visible when expanded */}
                  {expandedItem === "avoid" && (
                    <div
                      style={{
                        padding: "0 0 20px 0",
                        color: "white",
                        ...typography.body,
                      }}
                    >
                      <div style={{ paddingLeft: "20px", margin: "10px 0" }}>
                        {getAvoidPairingContent().items.map((item: string, index: number) => (
                          <div key={index} style={{ display: "flex", alignItems: "center", gap: "8px", marginBottom: "8px" }}>
                            <span style={{ fontSize: "16px", color: "red" }}>❌</span>
                            <span>{item}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* More Section */}
              <div
                style={{
                  width: "100%",
                  padding: "0 20px",
                  marginBottom: "20px",
                }}
              >
                <h1
                  style={{
                    ...typography.h1,
                    color: "white",
                    marginBottom: "24px",
                    textAlign: "left",
                  }}
                >
                  Want more?
                </h1>

                {/* Buy again button */}
                <Button
                  onClick={() => {
                    if (currentWine?.buyAgainLink) {
                      window.open(currentWine.buyAgainLink, '_blank');
                    } else {
                      console.log("No buy again link available");
                    }
                  }}
                  variant="primary"
                  style={{
                    margin: "0 0 24px 0",
                    width: "100%",
                    height: "56px",
                  }}
                >
                  Buy again
                </Button>


              </div>

              {/* We recommend Section */}
              <div
                style={{
                  width: "100%",
                  padding: "0 20px",
                  marginBottom: "20px",
                }}
              >
                <h1
                  style={{
                    ...typography.h1,
                    color: "white",
                    marginBottom: "24px",
                    textAlign: "left",
                  }}
                >
                  We recommend
                </h1>

                {/* Wine Recommendation Cards - Horizontal Scroll */}
                <div
                  className="wine-recommendations-container"
                  style={{
                    display: "flex",
                    gap: "16px",
                    overflowX: "auto",
                    paddingBottom: "8px",
                    paddingLeft: "4px",
                    paddingRight: "4px",
                    marginLeft: "-4px",
                    marginRight: "-4px",
                  }}
                >
                  {(() => {
                    // Get wines from admin panel (localStorage)
                    const adminWines = JSON.parse(localStorage.getItem('admin-wines') || '[]');
                    
                    // Filter out the current wine being viewed
                    const currentWineId = currentWine?.id;
                    const filteredWines = adminWines.filter((wine: any) => wine.id !== currentWineId);
                    
                    // If no wines to recommend after filtering, show a message
                    if (filteredWines.length === 0) {
                      return (
                        <div
                          style={{
                            backgroundColor: "rgba(255, 255, 255, 0.08)",
                            borderRadius: "16px",
                            padding: "32px",
                            width: "100%",
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "center",
                            justifyContent: "center",
                            textAlign: "center",
                          }}
                        >
                          <span style={{ 
                            color: "rgba(255, 255, 255, 0.8)", 
                            fontSize: "16px",
                            fontFamily: "Inter, sans-serif",
                            marginBottom: "8px"
                          }}>
                            No other wines available
                          </span>
                          <span style={{ 
                            color: "rgba(255, 255, 255, 0.6)", 
                            fontSize: "14px",
                            fontFamily: "Inter, sans-serif"
                          }}>
                            Add more wines in the admin panel to see recommendations
                          </span>
                        </div>
                      );
                    }
                    
                    // Show filtered wines from admin panel
                    return filteredWines.map((wine: any) => (
                      <div
                        key={wine.id}
                        style={{
                          backgroundColor: "rgba(255, 255, 255, 0.08)",
                          borderRadius: "16px",
                          padding: "16px 16px 24px 16px",
                          width: "208px",
                          minWidth: "208px",
                          flexShrink: 0,
                          display: "flex",
                          flexDirection: "column",
                          alignItems: "center",
                          cursor: "pointer",
                          transition: "all 0.3s ease",
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.12)";
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.08)";
                        }}
                        onClick={() => {
                          // Navigate to wine details page
                          if (wine.id) {
                            setLocation(`/wine-details/${wine.id}`);
                          }
                        }}
                      >
                        {/* Wine Bottle Image */}
                        <div
                          style={{
                            width: "120px",
                            height: "200px",
                            backgroundImage: wine.image ? `url('${wine.image}')` : "none",
                            backgroundColor: "transparent",
                            backgroundSize: "contain",
                            backgroundRepeat: "no-repeat",
                            backgroundPosition: "center",
                            marginBottom: "20px",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                          }}
                        >
                          {!wine.image && (
                            <span style={{ 
                              color: "rgba(255, 255, 255, 0.6)", 
                              fontSize: "12px",
                              textAlign: "center",
                              fontFamily: "Inter, sans-serif"
                            }}>
                              No Image
                            </span>
                          )}
                        </div>
                        
                        {/* Wine Name */}
                        <h2
                          style={{
                            ...typography.h2,
                            color: "white",
                            textAlign: "center",
                            margin: "0 0 16px 0",
                            height: "72px",
                            display: "flex",
                            alignItems: "flex-start",
                            justifyContent: "center",
                            fontSize: "20px",
                            lineHeight: "1.2",
                          }}
                        >
                          {wine.year ? `${wine.year} ` : ""}{wine.name}
                        </h2>
                        
                        {/* Rating Badges */}
                        <div
                          style={{
                            display: "flex",
                            gap: "20px",
                            flexWrap: "wrap",
                            justifyContent: "center",
                          }}
                        >
                          {wine.ratings?.vn && (
                            <span
                              style={{
                                color: "white",
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                              }}
                            >
                              <span style={{ ...typography.num, color: "white" }}>
                                {wine.ratings.vn}
                              </span>
                              <span style={{ ...typography.body1R, color: "#999999" }}>
                                VN
                              </span>
                            </span>
                          )}
                          {wine.ratings?.jd && (
                            <span
                              style={{
                                color: "white",
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                              }}
                            >
                              <span style={{ ...typography.num, color: "white" }}>
                                {wine.ratings.jd}
                              </span>
                              <span style={{ ...typography.body1R, color: "#999999" }}>
                                JD
                              </span>
                            </span>
                          )}
                          {wine.ratings?.ws && (
                            <span
                              style={{
                                color: "white",
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                              }}
                            >
                              <span style={{ ...typography.num, color: "white" }}>
                                {wine.ratings.ws}
                              </span>
                              <span style={{ ...typography.body1R, color: "#999999" }}>
                                WS
                              </span>
                            </span>
                          )}
                        </div>
                      </div>
                    ));
                  })()}
                </div>
              </div>

              {/* Summary Section - Only show on Home page, not Wine Details */}
              {messages.length > 0 && !showBuyButton && (
                <div
                  style={{
                    width: "100%",
                    padding: "0 20px",
                    marginBottom: "20px",
                  }}
                >
                  <h1
                    style={{
                      ...typography.h1,
                      color: "white",
                      marginBottom: "24px",
                      textAlign: "left",
                    }}
                  >Chat summary</h1>

                  {/* Discussion Summary */}
                  <div style={{ marginBottom: "32px" }}>
                    {(() => {
                      // Generate a comprehensive summary based on the conversation
                      const summaryText = messages.length > 0 
                        ? "Based on your conversation, you've explored the unique characteristics, flavor profile, and pairing possibilities of this exceptional wine. The discussion covered various aspects including its distinctive terroir, winemaking traditions, and what makes it a standout choice for wine enthusiasts. Your questions and our AI sommelier's responses have provided valuable insights into this wine's complexity and versatility."
                        : "This wine offers a rich tapestry of flavors and aromas that reflect its prestigious terroir and traditional winemaking methods. From its complex tasting profile to perfect food pairings, this bottle represents the finest expression of its varietal and region.";

                      return (
                        <div>
                          <p
                            style={{
                              ...typography.body,
                              color: "rgba(255, 255, 255, 0.8)",
                              lineHeight: "1.6",
                              margin: "0 0 16px 0",
                              paddingBottom: "16px",
                            }}
                          >
                            {summaryText}
                          </p>
                        </div>
                      );
                    })()}

                    {/* Show whole dialog button */}
                    <button
                      onClick={() => setLocation("/wine/conversation")}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.16)";
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.08)";
                      }}
                      onMouseDown={(e) => {
                        e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.16)";
                      }}
                      onMouseUp={(e) => {
                        e.currentTarget.style.backgroundColor = "rgba(255, 255, 255, 0.16)";
                      }}
                      style={{
                        backgroundColor: "rgba(255, 255, 255, 0.08)",
                        borderRadius: "32px",
                        height: "56px",
                        minHeight: "56px",
                        maxHeight: "56px",
                        padding: "0 16px",
                        margin: 0,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        border: "none",
                        color: "white",
                        fontFamily: "Inter, sans-serif",
                        fontSize: "16px",
                        fontWeight: 500,
                        cursor: "pointer",
                        outline: "none",
                        width: "100%",
                        boxSizing: "border-box",
                        lineHeight: "1",
                        transition: "background-color 0.2s ease",
                      }}
                    >
                      Show whole dialog
                    </button>

                    {/* Buy again button */}
                    <button
                      onClick={() => {
                        if (currentWine?.buyAgainLink) {
                          window.open(currentWine.buyAgainLink, '_blank');
                        } else {
                          console.log("No buy again link available");
                        }
                      }}
                      style={{
                        backgroundColor: "rgba(255, 255, 255, 0.08)",
                        borderRadius: "32px",
                        height: "56px",
                        minHeight: "56px",
                        maxHeight: "56px",
                        padding: "0 16px",
                        margin: "8px 0 0 0",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        border: "none",
                        color: "white",
                        fontFamily: "Inter, sans-serif",
                        fontSize: "16px",
                        fontWeight: 500,
                        cursor: "pointer",
                        outline: "none",
                        width: "100%",
                        boxSizing: "border-box",
                        lineHeight: "1",
                      }}
                    >
                      Buy again
                    </button>
                  </div>
                </div>
              )}

              {/* Conversation Section */}
              <div
                style={{
                  width: "100%",
                  padding: "0 20px",
                  marginBottom: "20px",
                }}
              >
                {showBuyButton && (
                  <>
                    {hasSharedContact ? (
                      <>
                        <h1
                          style={{
                            ...typography.h1,
                            color: "white",
                            marginBottom: "24px",
                            textAlign: "left",
                          }}
                        >Want more?</h1>

                        {/* Buy again button */}
                        <Button
                          onClick={() => {
                            if (currentWine?.buyAgainLink) {
                              window.open(currentWine.buyAgainLink, '_blank');
                            } else {
                              console.log("No buy again link available");
                            }
                          }}
                          variant="primary"
                          style={{
                            margin: "0 0 32px 0",
                            width: "100%",
                          }}
                        >
                          Buy again
                        </Button>

                        {/* Chat with AI Section */}
                        <div style={{ marginBottom: "32px" }}>
                          <h1
                            style={{
                              ...typography.h1,
                              color: "white",
                              marginBottom: "16px",
                              textAlign: "left",
                            }}
                          >
                            Chat
                          </h1>
                          
                          {/* Show recent conversation messages */}
                          {messages.length > 0 && (
                            <div style={{ marginBottom: "16px" }}>
                              {(() => {
                                // Show last 2-3 conversation exchanges (4-6 messages)
                                const recentMessages = messages.slice(-6);
                                
                                return recentMessages.map((message: any, index: number) => (
                                  <div
                                    key={`recent-${message.id}-${index}`}
                                    style={{
                                      display: "flex",
                                      justifyContent: message.role === "user" ? "flex-end" : "flex-start",
                                      width: "100%",
                                      marginBottom: "12px",
                                    }}
                                  >
                                    <div
                                      style={{
                                        backgroundColor: message.role === "user" ? "#F5F5F5" : "transparent",
                                        borderRadius: "16px",
                                        padding: message.role === "user" ? "12px 16px" : "12px 0",
                                        width: message.role === "user" ? "fit-content" : "100%",
                                        maxWidth: message.role === "user" ? "80%" : "100%",
                                      }}
                                    >
                                      {message.role === "assistant" ? (
                                        <div
                                          style={{
                                            ...typography.body,
                                            color: "#DBDBDB",
                                          }}
                                        >
                                          {formatContent(message.content)}
                                        </div>
                                      ) : (
                                        <div
                                          style={{
                                            ...typography.body,
                                            color: "#000000",
                                          }}
                                        >
                                          {formatContent(message.content)}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                ));
                              })()}
                              
                              {/* View full conversation button */}
                              <Button
                                onClick={() => setLocation("/wine/conversation")}
                                variant="secondary"
                                style={{
                                  height: "48px",
                                  margin: "8px 0 0 0",
                                  width: "100%",
                                }}
                              >View all</Button>
                            </div>
                          )}
                        </div>

                        {/* Discussion Summary */}
                        {messages.length > 0 && (
                          <div style={{ marginBottom: "32px" }}>
                            {(() => {
                              // Generate a comprehensive summary based on the conversation
                              const summaryText = messages.length > 0 
                                ? "Based on your conversation, you've explored the unique characteristics, flavor profile, and pairing possibilities of this exceptional wine. The discussion covered various aspects including its distinctive terroir, winemaking traditions, and what makes it a standout choice for wine enthusiasts. Your questions and our AI sommelier's responses have provided valuable insights into this wine's complexity and versatility."
                                : "This wine offers a rich tapestry of flavors and aromas that reflect its prestigious terroir and traditional winemaking methods. From its complex tasting profile to perfect food pairings, this bottle represents the finest expression of its varietal and region.";

                              return (
                                <div>
                                  {/* Hide summary text on scanned page */}
                                  {!showBuyButton && (
                                    <p
                                      style={{
                                        ...typography.body,
                                        color: "rgba(255, 255, 255, 0.8)",
                                        lineHeight: "1.6",
                                        margin: "0",
                                      }}
                                    >
                                      {summaryText}
                                    </p>
                                  )}
                                </div>
                              );
                            })()}

                            {/* Show whole dialog button - hide on scanned page */}
                            {!showBuyButton && (
                              <Button
                                onClick={() => setLocation("/wine/conversation")}
                                variant="secondary"
                                style={{
                                  height: "56px",
                                  width: "100%",
                                }}
                              >
                                Show whole dialog
                              </Button>
                            )}


                          </div>
                        )}
                      </>
                    ) : (
                      // Show "Chat history" section when user hasn't shared contact info
                      (<div
                        style={{ textAlign: "center", marginBottom: "32px" }}
                      >
                        <h1
                          style={{
                            ...typography.h1,
                            color: "white",
                            margin: "0 0 24px 0",
                            textAlign: "left",
                          }}
                        >
                          Chat history
                        </h1>

                      </div>)
                    )}
                  </>
                )}

                {/* Conversation Content */}
                <div id="conversation" className="space-y-4 mb-96">
                  {messages.length > 0 ? (
                    showFullConversation ? (
                      // Show full conversation with date headers
                      (<>
                        {(() => {
                          // Filter messages to show only current session (today's messages)
                          const today = new Date().toDateString();
                          const currentSessionMessages = messages.filter((message: any) => {
                            const messageDate = new Date(message.createdAt || Date.now());
                            return messageDate.toDateString() === today;
                          });
                          
                          // Group current session messages by date
                          const messagesByDate = currentSessionMessages.reduce((groups: any, message: any, index: number) => {
                            const messageDate = new Date(message.createdAt || Date.now());
                            const dateKey = messageDate.toDateString();
                            
                            if (!groups[dateKey]) {
                              groups[dateKey] = [];
                            }
                            groups[dateKey].push({ ...message, originalIndex: index });
                            return groups;
                          }, {});

                          return Object.entries(messagesByDate).map(([dateKey, dayMessages]: [string, any]) => (
                            <div key={dateKey}>
                              {/* Sticky Date Header */}
                              <div
                                style={{
                                  position: "sticky",
                                  top: "75px", // Account for main header
                                  zIndex: 10,
                                  display: "flex",
                                  justifyContent: "center",
                                  marginBottom: "16px",
                                  marginTop: Object.keys(messagesByDate).indexOf(dateKey) > 0 ? "24px" : "0px",
                                }}
                              >
                                <div
                                  style={{
                                    backgroundColor: "rgba(28, 28, 28, 0.9)",
                                    backdropFilter: "blur(8px)",
                                    borderRadius: "16px",
                                    padding: "6px 12px",
                                    border: "1px solid rgba(255, 255, 255, 0.1)",
                                  }}
                                >
                                  <span
                                    style={{
                                      color: "rgba(255, 255, 255, 0.8)",
                                      fontSize: "12px",
                                      fontWeight: 500,
                                      fontFamily: "Inter, sans-serif",
                                    }}
                                  >
                                    {new Date(dateKey).toLocaleDateString('en-US', {
                                      weekday: 'long',
                                      year: 'numeric',
                                      month: 'long',
                                      day: 'numeric'
                                    })}
                                  </span>
                                </div>
                              </div>

                              {/* Messages for this date */}
                              {dayMessages.map((message: any, msgIndex: number) => (
                                <div
                                  key={`${message.id}-${message.originalIndex}`}
                                  style={{
                                    display: "flex",
                                    justifyContent:
                                      message.role === "user"
                                        ? "flex-end"
                                        : "flex-start",
                                    width: "100%",
                                    marginBottom: "12px",
                                  }}
                                >
                                  <div
                                    style={{
                                      backgroundColor:
                                        message.role === "user"
                                          ? "#F5F5F5"
                                          : "transparent",
                                      borderRadius: "16px",
                                      padding: "16px",
                                      width:
                                        message.role === "user"
                                          ? "fit-content"
                                          : "100%",
                                      maxWidth:
                                        message.role === "user" ? "80%" : "100%",
                                    }}
                                    data-role={message.role}
                                  >
                                    {message.role === "assistant" ? (
                                      <div
                                        style={{
                                          color: "#DBDBDB",
                                          fontFamily: "Inter, system-ui, sans-serif",
                                          fontSize: "16px",
                                          lineHeight: "1.6",
                                        }}
                                      >
                                        {formatContent(message.content)}
                                      </div>
                                    ) : (
                                      <div
                                        style={{
                                          color: "#000000",
                                          fontFamily: "Inter, system-ui, sans-serif",
                                          fontSize: "16px",
                                          lineHeight: "1.6",
                                        }}
                                      >
                                        {formatContent(message.content)}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          ));
                        })()}
                        {/* Back to Summary Button */}
                        <div
                          style={{
                            textAlign: "center",
                            marginBottom: "20px",
                            paddingTop: "20px",
                          }}
                        >
                          <Button
                            onClick={() => setShowFullConversation(false)}
                            variant="secondary"
                            style={{
                              height: "56px",
                              width: "100%",
                              maxWidth: "320px",
                              marginLeft: "auto",
                              marginRight: "auto",
                            }}
                          >
                            Back to Summary
                          </Button>
                        </div>
                      </>)
                    ) : (
                      // Show summary
                      ((() => {
                        // Generate summary content for 3 main topics
                        const summaryTopics = [
                          {
                            title: "Tasting Profile",
                            summary:
                              "Discover the complex flavors and aromas that make this wine unique, from initial notes to the lingering finish.",
                          },
                          {
                            title: "Food Pairing",
                            summary:
                              "Learn which dishes complement this wine best and how to create perfect pairings for your dining experience.",
                          },
                          {
                            title: "Wine Origin",
                            summary:
                              "Explore the terroir, region, and winemaking traditions that shaped this bottle's distinctive character.",
                          },
                        ];

                        return (
                          <div
                            style={{
                              color: "#DBDBDB",
                              fontFamily: "Inter, system-ui, sans-serif",
                            }}
                          ></div>
                        );
                      })())
                    )
                  ) : null}

                  {/* Typing Indicator */}
                  {isTyping && (
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        width: "100%",
                        marginBottom: "12px",
                        padding: "16px",
                      }}
                    >
                      <ShiningText text="Thinking..." />
                    </div>
                  )}
                </div>

                {/* Hidden Audio Controls - kept for compatibility */}
                <div
                  id="audio-controls"
                  style={{ display: "none", visibility: "hidden" }}
                >
                  <button id="play-audio-btn">Play Response Audio</button>
                </div>
              </div>
            </div>

            {/* Extra space at the bottom */}
            <div style={{ height: "80px" }}></div>
          </div>

          {/* Input Area or Buy Button - Fixed to Bottom */}
          <div
            style={{
              backgroundColor: "#1C1C1C",
              padding: "16px",
              zIndex: 50,
              position: "fixed",
              bottom: 0,
              left: 0,
              right: 0,
              borderTop: "1px solid rgba(255, 255, 255, 0.2)",
            }}
          >
            <div className="max-w-3xl mx-auto">
              {showBuyButton && !showChatInput ? (
                // Show Buy Again Button for WineDetails page
                (<Button
                  onClick={() => {
                    if (currentWine?.buyAgainLink) {
                      window.open(currentWine.buyAgainLink, '_blank');
                    } else {
                      console.log("No buy again link available");
                    }
                  }}
                  variant="primary"
                  style={{
                    margin: 0,
                    width: "100%",
                  }}
                >Buy again
                                  </Button>)
              ) : (
                // Show suggestions and input for Home page
                (<>
                  {/* Suggestion chips - always visible above input */}
                  <div className="scrollbar-hide overflow-x-auto mb-2 sm:mb-3 pb-1 -mt-1 flex gap-1.5 sm:gap-2 w-full">
                    <Button
                      onClick={() => handleSuggestionClick("Tasting notes")}
                      variant="secondary"
                      style={{ height: "32px" }}
                    >
                      Tasting notes
                    </Button>
                    <Button
                      onClick={() =>
                        handleSuggestionClick("Simple recipes for this wine")
                      }
                      variant="secondary"
                      style={{ height: "32px" }}
                    >
                      Simple recipes
                    </Button>
                    <Button
                      onClick={() =>
                        handleSuggestionClick("Where is this wine from?")
                      }
                      variant="secondary"
                      style={{ height: "32px" }}
                    >
                      Where it's from
                    </Button>
                  </div>
                  <ChatInput
                    onSendMessage={handleSendMessage}
                    isProcessing={isTyping}
                    onFocus={() => setIsKeyboardFocused(true)}
                    onBlur={() => setIsKeyboardFocused(false)}
                    voiceButtonComponent={
                      <VoiceAssistant
                        onSendMessage={handleSendMessage}
                        isProcessing={isTyping}
                      />
                    }
                  />
                </>)
              )}
            </div>
          </div>
        </main>
