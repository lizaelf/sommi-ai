import openai
import os
import json
import time
from pathlib import Path

class MobileCompatibleAssistant:
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        self.audio_supported = False
        self.user_interacted = False
        
        # Mobile-friendly settings
        self.voice_config = {
            "model": "tts-1",  # Faster model for mobile
            "voice": "alloy",
            "speed": 1.0,
            "response_format": "mp3"
        }
        
        # Detect mobile
        self.is_mobile = self.detect_mobile()
        
        # Initialize based on platform
        if not self.is_mobile:
            self.init_desktop_audio()
    
    def detect_mobile(self):
        """Detect if running on mobile"""
        try:
            import platform
            system = platform.system().lower()
            # Simple mobile detection
            return system in ['android', 'ios'] or 'mobile' in os.environ.get('USER_AGENT', '').lower()
        except:
            return True  # Assume mobile if uncertain
    
    def init_desktop_audio(self):
        """Initialize audio for desktop"""
        try:
            import pygame
            pygame.mixer.pre_init(frequency=22050, size=-16, channels=2, buffer=512)
            pygame.mixer.init()
            self.audio_supported = True
            self.user_interacted = True  # Desktop doesn't need interaction
            print("üîä Desktop audio initialized")
        except Exception as e:
            print(f"‚ùå Desktop audio failed: {e}")
            self.audio_supported = False
    
    def request_audio_permission(self):
        """Request audio permission (call after user interaction)"""
        if self.is_mobile:
            print("üì± Mobile detected - audio requires user interaction")
            print("Tap/click anywhere to enable audio...")
            # In a real web app, this would be handled by frontend JavaScript
            return False
        return True
    
    def enable_audio_after_interaction(self):
        """Enable audio after user interaction"""
        if self.audio_supported:
            return True
            
        try:
            import pygame
            pygame.mixer.init()
            # Test audio
            self.audio_supported = True
            self.user_interacted = True
            print("‚úÖ Audio enabled after user interaction")
            return True
        except Exception as e:
            print(f"‚ùå Audio still not available: {e}")
            return False
    
    def get_ai_response(self, user_input):
        """Get AI response with mobile optimization"""
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",  # Faster for mobile
                messages=[
                    {
                        "role": "system", 
                        "content": "You are a helpful AI assistant. Keep responses brief and mobile-friendly."
                    },
                    {"role": "user", "content": user_input}
                ],
                temperature=0.7,
                max_tokens=100,  # Shorter responses for mobile
                timeout=10  # Timeout for mobile networks
            )
            return response.choices[0].message.content
        except Exception as e:
            print(f"‚ùå AI Error: {e}")
            return "Sorry, I'm having trouble connecting. Please try again."
    
    def speak_text_mobile_safe(self, text):
        """Mobile-safe text-to-speech"""
        # Always show text first
        print(f"ü§ñ AI: {text}")
        
        # Try audio only if supported and user has interacted
        if not self.audio_supported or not self.user_interacted:
            return
        
        try:
            # Generate audio with timeout
            response = self.client.audio.speech.create(
                model=self.voice_config["model"],
                voice=self.voice_config["voice"],
                speed=self.voice_config["speed"],
                response_format=self.voice_config["response_format"],
                input=text[:500]  # Limit text length for mobile
            )
            
            # Play audio (mobile-compatible)
            self.play_audio_mobile_safe(response.content)
            
        except Exception as e:
            print(f"üîá Audio unavailable: {e}")
    
    def play_audio_mobile_safe(self, audio_content):
        """Mobile-safe audio playback"""
        try:
            if self.is_mobile:
                # For mobile, save and provide download link
                # In a real web app, this would be handled differently
                print("üì± Audio generated - would provide playback controls on mobile")
                return
            
            # Desktop playback
            import pygame
            from io import BytesIO
            
            audio_data = BytesIO(audio_content)
            pygame.mixer.music.load(audio_data)
            pygame.mixer.music.play()
            
            # Non-blocking wait
            start_time = time.time()
            while pygame.mixer.music.get_busy() and (time.time() - start_time) < 30:
                time.sleep(0.1)
                
        except Exception as e:
            print(f"‚ùå Playback error: {e}")
    
    def chat_mobile_friendly(self, user_input):
        """Mobile-friendly chat interface"""
        print(f"üë§ User: {user_input}")
        
        # Enable audio after first interaction
        if not self.user_interacted:
            self.enable_audio_after_interaction()
        
        # Get AI response
        try:
            ai_response = self.get_ai_response(user_input)
            self.speak_text_mobile_safe(ai_response)
            return ai_response
        except Exception as e:
            error_msg = "Sorry, I'm experiencing technical difficulties. Please try again."
            print(f"ü§ñ AI: {error_msg}")
            return error_msg

# Web-deployment friendly main function
def main():
    """Main function optimized for web deployment"""
    print("üöÄ Starting Mobile-Compatible AI Assistant...")
    
    # Check environment
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY not found!")
        print("Please set your OpenAI API key in environment variables.")
        return
    
    assistant = MobileCompatibleAssistant()
    
    # Mobile-friendly startup
    if assistant.is_mobile:
        print("üì± Mobile browser detected")
        print("üí° Note: Audio may require user interaction")
    
    print("üé§ AI Assistant ready!")
    print("Type your message (or 'exit' to quit):")
    
    try:
        while True:
            user_input = input("\nüë§ You: ").strip()
            
            if not user_input:
                continue
                
            if user_input.lower() in ['exit', 'quit', 'bye']:
                print("üëã Goodbye!")
                break
            
            # Process with mobile considerations
            assistant.chat_mobile_friendly(user_input)
            
    except KeyboardInterrupt:
        print("\nüëã Assistant stopped.")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    main()