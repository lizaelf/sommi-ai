import React from "react";

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: "primary" | "secondary" | "secondaryFilled";
  disabled?: boolean;
  className?: string;
  style?: React.CSSProperties;
}

const Button: React.FC<ButtonProps> = ({
  children,
  onClick,
  variant = "primary",
  disabled = false,
  className = "",
  style = {},
  ...props
}) => {
  // Use CSS class for secondaryFilled to override global button styles
  if (variant === "secondaryFilled") {
    return (
      <button
        className="secondary-filled-button"
        style={style}
        onClick={disabled ? undefined : onClick}
        disabled={disabled}
        {...props}
      >
        {children}
      </button>
    );
  }

  const getVariantStyles = (): React.CSSProperties => {
    switch (variant) {
      case "secondary":
        return {
          backgroundColor: "transparent",
          border: "1px solid rgba(255, 255, 255, 0.2)",
          color: "white",
          borderRadius: "32px",
          padding: "8px 16px",
          fontSize: "14px",
          fontWeight: 500,
          fontFamily: "Inter, sans-serif",
          cursor: "pointer",
          outline: "none",
          transition: "all 0.2s ease",
          whiteSpace: "nowrap",
          minHeight: "36px",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          boxSizing: "border-box",
        };
      default: // primary
        return {
          backgroundColor: "white",
          border: "none",
          color: "black",
          borderRadius: "32px",
          padding: "12px 24px",
          fontSize: "16px",
          fontWeight: 500,
          fontFamily: "Inter, sans-serif",
          cursor: "pointer",
          outline: "none",
          transition: "all 0.2s ease",
          minHeight: "48px",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          boxSizing: "border-box",
        };
    }
  };

  const baseStyles: React.CSSProperties = {
    ...getVariantStyles(),
    opacity: disabled ? 0.5 : 1,
    cursor: disabled ? "not-allowed" : "pointer",
    ...style,
  };

  return (
    <button
      className={className}
      style={baseStyles}
      onClick={disabled ? undefined : onClick}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;