// ADD this state to track filled inputs:
const [filledInputs, setFilledInputs] = useState({
  firstName: false,
  lastName: false,
  email: false,
  phone: false
});

// UPDATE your handleInputChange function:
const handleInputChange = (field: string, value: string) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));
  
  // Track which inputs are filled
  setFilledInputs(prev => ({
    ...prev,
    [field]: value.trim() !== ''
  }));
};

// UPDATE your CSS to use .filled class:
<style>
{`
  .contact-form-input {
    background: #1C1C1C !important;
    background-color: #1C1C1C !important;
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
    
    border-top: 2px solid transparent !important;
    border-right: 1px solid transparent !important;
    border-bottom: 1px solid transparent !important;
    border-left: 1px solid transparent !important;
    border-radius: 16px !important;
    
    background-image: 
      linear-gradient(#1C1C1C, #1C1C1C), 
      radial-gradient(circle at top center, rgba(255, 255, 255, 0.46) 0%, rgba(255, 255, 255, 0.16) 100%) !important;
    background-origin: border-box !important;
    background-clip: padding-box, border-box !important;
    overflow: hidden !important;
  }
  
  .contact-form-input.filled {
    background: rgba(255, 255, 255, 0.08) !important;
    background-color: rgba(255, 255, 255, 0.08) !important;
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.08)), 
      radial-gradient(circle at top center, rgba(255, 255, 255, 0.46) 0%, rgba(255, 255, 255, 0.16) 100%) !important;
  }
  
  .contact-form-input::placeholder {
    color: #959493 !important;
  }
  
  .save-button {
    background: rgba(255, 255, 255, 0.04) !important;
    background-color: rgba(255, 255, 255, 0.04) !important;
    -webkit-appearance: none !important;
    appearance: none !important;
    border: none !important;
    
    border-top: 2px solid transparent !important;
    border-right: 1px solid transparent !important;
    border-bottom: 1px solid transparent !important;
    border-left: 1px solid transparent !important;
    border-radius: 32px !important;
    
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.04)), 
      radial-gradient(circle at top center, rgba(255, 255, 255, 0.46) 0%, rgba(255, 255, 255, 0.16) 100%) !important;
    background-origin: border-box !important;
    background-clip: padding-box, border-box !important;
    overflow: hidden !important;
  }
`}
</style>

// UPDATE your inputs to use dynamic className:
<input
  type="text"
  placeholder="First name"
  value={formData.firstName}
  onChange={(e) => handleInputChange('firstName', e.target.value)}
  className={`contact-form-input ${filledInputs.firstName ? 'filled' : ''}`}
  style={{
    display: 'flex',
    height: '56px',
    padding: '16px 24px',
    alignItems: 'center',
    width: '100%',
    color: 'white',
    fontFamily: 'Inter, sans-serif',
    fontSize: '16px',
    outline: 'none',
    boxSizing: 'border-box'
  }}
/>

// Apply the same pattern to lastName, email, and phone inputs