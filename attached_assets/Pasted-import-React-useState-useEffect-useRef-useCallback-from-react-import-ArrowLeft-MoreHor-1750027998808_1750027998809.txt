import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ArrowLeft, MoreHorizontal, Trash2 } from 'lucide-react';
import { Link, useLocation, useParams } from 'wouter';
import { createPortal } from 'react-dom';
import EnhancedChatInterface from '@/components/EnhancedChatInterface';
import QRScanModal from '@/components/QRScanModal';
import AppHeader, { HeaderSpacer } from '@/components/AppHeader';
import { DataSyncManager } from '@/utils/dataSync';

interface SelectedWine {
  id: number;
  name: string;
  image: string;
  bottles: number;
  ratings: {
    vn: number;
    jd: number;
    ws: number;
    abv: number;
  };
  location?: string;
  description?: string;
  foodPairing?: string[];
  buyAgainLink?: string;
}

export default function WineDetails() {
  const [location] = useLocation();
  const { id } = useParams();
  const [wine, setWine] = useState<SelectedWine | null>(null);
  const [showActions, setShowActions] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const [interactionChoiceMade, setInteractionChoiceMade] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const imageRef = useRef<HTMLImageElement>(null);
  const actionsRef = useRef<HTMLDivElement>(null);

  // Stable handler using useCallback to prevent re-renders
  const handleQRReset = useCallback((event: Event) => {
    try {
      const detail = (event as CustomEvent).detail;
      if (detail?.action === 'voice') {
        console.log('üé§ Voice interaction selected');
        setInteractionChoiceMade(true);
        setShowQRModal(false);
      } else if (detail?.action === 'text') {
        console.log('üí¨ Text interaction selected');
        setInteractionChoiceMade(true);
        setShowQRModal(false);
      }
    } catch (error) {
      console.error('Error handling QR reset:', error);
    }
  }, []);

  // Stable handler for closing actions dropdown
  const handleClickOutside = useCallback((event: MouseEvent) => {
    if (actionsRef.current && !actionsRef.current.contains(event.target as Node)) {
      setShowActions(false);
    }
  }, []);

  // Wine data loading effect
  useEffect(() => {
    let isMounted = true;
    
    const loadWineData = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        // Initialize data sync manager
        await DataSyncManager.initialize();
        
        // Get wine ID from URL params
        const urlParams = new URLSearchParams(window.location.search);
        const wineIdFromQuery = urlParams.get('wine');
        const wineId = id || wineIdFromQuery || '1';
        
        console.log('Loading wine data for ID:', wineId);
        
        if (wineId && isMounted) {
          const wineData = DataSyncManager.getWineById(parseInt(wineId));
          
          if (wineData && isMounted) {
            const transformedWine = {
              id: wineData.id,
              name: wineData.name,
              year: wineData.year,
              bottles: wineData.bottles,
              image: wineData.image,
              ratings: wineData.ratings,
              buyAgainLink: wineData.buyAgainLink,
              location: wineData.location,
              description: wineData.description,
              foodPairing: wineData.foodPairing,
            };
            
            setWine(transformedWine);
            console.log('Wine loaded successfully:', transformedWine.name);
          } else if (isMounted) {
            setError(`Wine not found for ID: ${wineId}`);
          }
        }
      } catch (err) {
        if (isMounted) {
          console.error('Error loading wine data:', err);
          setError('Failed to load wine data');
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };

    loadWineData();

    return () => {
      isMounted = false;
    };
  }, [id, location]);

  // Event listeners effect
  useEffect(() => {
    window.addEventListener('qr-reset', handleQRReset);
    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      window.removeEventListener('qr-reset', handleQRReset);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [handleQRReset, handleClickOutside]);

  const handleImageLoad = useCallback(() => {
    setImageLoaded(true);
    console.log('Wine image loaded successfully');
  }, []);

  const handleImageError = useCallback(() => {
    console.error('Failed to load wine image');
    setImageLoaded(true); // Still set to true to remove loading state
  }, []);

  const handleDeleteAccount = useCallback(() => {
    console.log('Delete account clicked');
    setShowActions(false);
    // Add your delete account logic here
  }, []);

  // Loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen bg-black text-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4"></div>
          <div className="mb-2">Loading wine details...</div>
          <div className="text-sm text-gray-400">ID: {id}</div>
        </div>
      </div>
    );
  }

  // Error state
  if (error || !wine) {
    return (
      <div className="flex items-center justify-center h-screen bg-black text-white">
        <div className="text-center">
          <div className="text-red-400 mb-4">‚ö†Ô∏è</div>
          <div className="mb-2">{error || 'Wine not found'}</div>
          <div className="text-sm text-gray-400">ID: {id}</div>
          <Link href="/">
            <button className="mt-4 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition-colors">
              Go Home
            </button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-black text-white min-h-screen overflow-x-hidden">
      {/* Header with Actions */}
      <div className="relative">
        <AppHeader
          rightContent={
            <div className="relative" ref={actionsRef}>
              <button
                onClick={() => setShowActions(!showActions)}
                className="p-2 rounded-full hover:bg-white/10 transition-colors focus:outline-none focus:ring-2 focus:ring-white/20"
                aria-label="More options"
              >
                <MoreHorizontal size={24} color="white" />
              </button>
              
              {/* Actions Dropdown - Fixed positioning */}
              {showActions && createPortal(
                <div 
                  className="fixed bg-white rounded-lg shadow-lg min-w-[200px] z-[9999]"
                  style={{
                    top: '60px',
                    right: '16px',
                  }}
                >
                  <button
                    onClick={handleDeleteAccount}
                    className="w-full px-4 py-3 text-left text-red-600 hover:bg-gray-50 flex items-center gap-2 transition-colors focus:outline-none focus:bg-gray-50"
                  >
                    <Trash2 size={16} />
                    Delete account
                  </button>
                </div>,
                document.body
              )}
            </div>
          }
        />
        <HeaderSpacer />
      </div>

      {/* Main Content */}
      <div className="px-6 pt-4 pb-6">
        {/* Wine Image and Basic Info */}
        <div className="text-center mb-6">
          {/* Wine Image Container */}
          <div className="mx-auto mb-6 relative" style={{ width: '200px', height: '300px' }}>
            <div className="w-full h-full bg-gray-800 rounded-lg overflow-hidden">
              <img
                ref={imageRef}
                src={wine.image}
                alt={`${wine.name} bottle`}
                onLoad={handleImageLoad}
                onError={handleImageError}
                className={`w-full h-full object-contain transition-opacity duration-500 ${
                  imageLoaded ? 'opacity-100' : 'opacity-0'
                }`}
                loading="lazy"
              />
              {!imageLoaded && (
                <div className="absolute inset-0 flex items-center justify-center bg-gray-800">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
                </div>
              )}
            </div>
          </div>

          {/* Wine Name */}
          <h1 className="text-2xl font-bold mb-2 font-serif">
            {wine.name}
          </h1>

          {/* Wine Ratings */}
          <div className="grid grid-cols-4 gap-4 text-center mb-6">
            <div>
              <div className="text-lg font-bold text-yellow-400">{wine.ratings.vn}</div>
              <div className="text-xs text-gray-400">VN</div>
            </div>
            <div>
              <div className="text-lg font-bold text-yellow-400">{wine.ratings.jd}</div>
              <div className="text-xs text-gray-400">JD</div>
            </div>
            <div>
              <div className="text-lg font-bold text-yellow-400">{wine.ratings.ws}</div>
              <div className="text-xs text-gray-400">WS</div>
            </div>
            <div>
              <div className="text-lg font-bold text-yellow-400">{wine.ratings.abv}%</div>
              <div className="text-xs text-gray-400">ABV</div>
            </div>
          </div>
        </div>

        {/* Wine Details Section */}
        <div className="space-y-6 mb-8">
          {/* Location */}
          {wine.location && (
            <div>
              <h3 className="text-lg font-semibold mb-2 font-serif">
                Origin
              </h3>
              <p className="text-gray-300 leading-relaxed">
                {wine.location}
              </p>
            </div>
          )}

          {/* Description */}
          {wine.description && (
            <div>
              <h3 className="text-lg font-semibold mb-2 font-serif">
                Tasting Notes
              </h3>
              <p className="text-gray-300 leading-relaxed">
                {wine.description}
              </p>
            </div>
          )}

          {/* Food Pairing */}
          {wine.foodPairing && wine.foodPairing.length > 0 && (
            <div>
              <h3 className="text-lg font-semibold mb-3 font-serif">
                Perfect Pairings
              </h3>
              <div className="flex flex-wrap gap-2">
                {wine.foodPairing.map((pairing, index) => (
                  <span 
                    key={index}
                    className="bg-white/10 px-3 py-1 rounded-full text-sm hover:bg-white/20 transition-colors"
                  >
                    {pairing}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Chat Interface */}
        <div className="mt-8">
          <EnhancedChatInterface 
            showBuyButton={true} 
            selectedWine={wine ? {
              id: wine.id,
              name: wine.name,
              image: wine.image,
              bottles: wine.bottles,
              ratings: wine.ratings
            } : null} 
          />
        </div>
      </div>

      {/* QR Modal */}
      <QRScanModal
        isOpen={showQRModal}
        onClose={() => setShowQRModal(false)}
        onTextChoice={() => {
          setInteractionChoiceMade(true);
          setShowQRModal(false);
        }}
        onVoiceChoice={() => {
          setInteractionChoiceMade(true);
          setShowQRModal(false);
        }}
      />
    </div>
  );
}