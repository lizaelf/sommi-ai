document.addEventListener('DOMContentLoaded', () => {
    // DOM elements
    const chatHistory = document.getElementById('chat-history');
    const textInput = document.getElementById('text-input');
    const sendBtn = document.getElementById('send-btn');
    const voiceBtn = document.getElementById('voice-btn');
    const statusDisplay = document.getElementById('status-display');
    
    // Speech Recognition setup
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    // Check if speech recognition is supported
    if (!SpeechRecognition) {
        voiceBtn.disabled = true;
        voiceBtn.title = "Speech recognition not supported in this browser";
        console.error("Speech recognition not supported");
    } else {
        const recognition = new SpeechRecognition();
        recognition.lang = 'en-US';
        recognition.continuous = false;
        recognition.interimResults = false;
        
        // Start listening when voice button is clicked
        voiceBtn.addEventListener('click', () => {
            recognition.start();
            statusDisplay.textContent = "Listening...";
            statusDisplay.className = "status listening";
        });
        
        // Process speech results
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            textInput.value = transcript;
            
            // Auto-send the transcribed message
            sendMessage();
        };
        
        recognition.onend = () => {
            statusDisplay.textContent = "Ready";
            statusDisplay.className = "status";
        };
        
        recognition.onerror = (event) => {
            console.error("Speech recognition error", event.error);
            statusDisplay.textContent = `Error: ${event.error}`;
            statusDisplay.className = "status";
        };
    }
    
    // Send button click handler
    sendBtn.addEventListener('click', sendMessage);
    
    // Also send on Enter key (but Shift+Enter for new line)
    textInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Function to send message and get AI response
    async function sendMessage() {
        const userMessage = textInput.value.trim();
        
        if (!userMessage) return;
        
        // Add user message to chat
        addMessageToChat('user', userMessage);
        
        // Clear input
        textInput.value = '';
        
        // Update status
        statusDisplay.textContent = "Thinking...";
        statusDisplay.className = "status thinking";
        
        try {
            // Send message to backend
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: userMessage })
            });
            
            if (!response.ok) {
                throw new Error('Failed to get response');
            }
            
            const data = await response.json();
            
            // Add AI response to chat
            addMessageToChat('ai', data.message);
            
            // Read response aloud
            speakResponse(data.message);
            
        } catch (error) {
            console.error('Error:', error);
            statusDisplay.textContent = `Error: ${error.message}`;
            statusDisplay.className = "status";
        }
    }
    
    // Add message to chat history
    function addMessageToChat(sender, message) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', `${sender}-message`);
        messageDiv.textContent = message;
        
        chatHistory.appendChild(messageDiv);
        
        // Scroll to bottom
        chatHistory.scrollTop = chatHistory.scrollHeight;
    }
    
    // Function to speak AI response
    async function speakResponse(text) {
        statusDisplay.textContent = "Speaking...";
        statusDisplay.className = "status speaking";
        
        try {
            const response = await fetch('/api/speak', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text })
            });
            
            if (!response.ok) {
                throw new Error('Failed to generate speech');
            }
            
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            
            audio.onended = () => {
                statusDisplay.textContent = "Ready";
                statusDisplay.className = "status";
                URL.revokeObjectURL(audioUrl); // Clean up
            };
            
            audio.play();
            
        } catch (error) {
            console.error('Error speaking response:', error);
            statusDisplay.textContent = `Error: ${error.message}`;
            statusDisplay.className = "status";
        }
    }
    
    // Add welcome message
    addMessageToChat('ai', "Hello! I'm your AI sommelier. You can type or speak to ask me anything about wine. How can I help you today?");
});