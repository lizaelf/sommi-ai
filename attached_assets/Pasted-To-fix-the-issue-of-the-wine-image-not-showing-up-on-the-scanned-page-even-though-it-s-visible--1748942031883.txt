To fix the issue of the wine image not showing up on the **scanned page**, even though it's visible in **AdminCRM**, here's a checklist and likely fixes based on your provided code:

---

### ✅ **1. Check for Base64 image in AdminCRM**

In `AdminCRM.tsx`, wine images are shown **only if**:

```ts
card.image && card.image.trim() !== "" && card.image.startsWith('data:')
```

So Admin only allows base64 images. Confirm your wines have `data:` images saved — if not, they won’t display.

➡️ **Fix**: Check image base64 is saved when uploading in the wine edit page.

---

### ✅ **2. Validate `DataSyncManager.saveUnifiedWineData` includes the `image`**

Your `saveUnifiedWineData` function looks fine — it includes `image` as long as it's on the object.

➡️ **Debug Tip**: Add a `console.log` right before saving:

```ts
console.log('Saving wines with images:', wines.map(w => ({ id: w.id, imageLen: w.image?.length || 0, startsWithData: w.image?.startsWith('data:') })));
```

---

### ✅ **3. Check image transfer between AdminCRM and Scanned**

In `Scanned.tsx`, you're trying to use the wine from URL or `localStorage`, but if the URL wine's image is missing or mismatched, you fallback to the one in `DataSyncManager`.

This logic seems correct:

```ts
if (crmWine && crmWine.image !== wine.image) {
  console.warn(`Image mismatch detected for wine ${wine.id}. Using CRM data.`);
  setSelectedWine({ ...wine, image: crmWine.image });
}
```

➡️ **Fix**: But if `crmWine.image` is also `""`, the fallback still results in no image.

👉 Ensure `crmWine.image` is a base64-encoded `data:image/...` URL. You can print this:

```ts
console.log('crmWine image info:', {
  id: crmWine?.id,
  hasImage: !!crmWine?.image,
  imagePrefix: crmWine?.image?.substring(0, 30),
});
```

---

### ✅ **4. Check Save Flow in Edit Page**

If you edit wine images and save from the wine-edit page, but the new image isn’t saved correctly via `DataSyncManager.addOrUpdateWine()`, the scanned page won’t see the update.

➡️ Make sure in the edit form you call `DataSyncManager.addOrUpdateWine(wine)` **with `image` included**.

---

### ✅ **5. Force Image Refresh with Key**

You're already doing:

```tsx
key={`unique-wine-${selectedWine.id}-${selectedWine.image?.substring(22, 40)}`}
```

which is perfect for React image re-rendering.

---

### ✅ **6. Prevent corrupted data or oversized base64 strings**

If the image exceeds 4MB, `localStorage` save may silently fail.

➡️ Consider compressing the image before converting to base64.

---

### 🔧 Suggestion: Add fallback in scanned page

If everything else fails, add a fallback in case `crmWine.image` is empty:

```ts
if (crmWine && !crmWine.image) {
  console.warn(`Wine ${wine.id} has no image in CRM. Showing placeholder.`);
}
```

---

### ✅ Final sanity check

In DevTools → Application → Local Storage → `unified-wine-data`, look for the wine’s `image` field and verify it starts with `data:image/`.

---

If you're still stuck after checking these points, send me the code for the wine edit/upload logic — that's the most likely culprit if AdminCRM sees images but scanned does not.
